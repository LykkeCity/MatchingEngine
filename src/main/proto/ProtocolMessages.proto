package com.lykke.matching.engine.messages;

option java_package = "com.lykke.matching.engine.messages";
option java_outer_classname = "ProtocolMessages";

message Response {
    required int64 uid = 1;
    optional string bussinesId = 2;
    optional string recordId = 3;
}

message NewResponse {
    required string id = 1;
    optional string matchingEngineId = 2;
    required int32 status = 3;
    optional string statusReason = 4;
}

message MarketOrderResponse {
    required string id = 1;
    required int32 status = 2;
    optional string statusReason = 3;
    optional double price = 4;
}

message MultiLimitOrderResponse {
    required string id = 1;
    required int32 status = 2;
    optional string statusReason = 3;
    required string assetPairId = 4;

    message OrderStatus {
        required string id = 1;
        optional string matchingEngineId = 2;
        required int32 status = 3;
        optional string statusReason = 4;
        required double volume = 5;
        required double price = 6;
    }

    repeated OrderStatus statuses = 5;
}

message CashOperation {
    required int64 uid = 1;
    required string clientId = 2;
    required int64 timestamp = 3;
    required string assetId = 4;
    required double amount = 5;
    required string bussinesId = 6;
    required bool sendToBitcoin = 7;
}

message CashInOutOperation {
    required string id = 1;
    required string clientId = 2;
    required int64 timestamp = 3;
    required string assetId = 4;
    required double volume = 5;
    repeated Fee fees = 6;
}

message CashTransferOperation {
    required string id = 1;
    required string fromClientId = 2;
    required string toClientId = 3;
    required int64 timestamp = 4;
    required string assetId = 5;
    required double volume = 6;
    optional Fee fee = 7;
    optional double overdraftLimit = 8;
    repeated Fee fees = 9;
}

message CashSwapOperation {
    required string id = 1;
    required string clientId1 = 2;
    required string assetId1 = 3;
    required double volume1 = 4;
    required string clientId2 = 5;
    required string assetId2 = 6;
    required double volume2 = 7;
    required int64 timestamp = 8;
}

message OldLimitOrder {
    required int64 uid = 1;
    required int64 timestamp = 2;
    required string clientId = 3;
    required string assetPairId = 4;
    required double volume = 5;
    required double price = 6;
    optional bool cancelAllPreviousLimitOrders = 7;
}

message LimitOrder {
    required string uid = 1;
    required int64 timestamp = 2;
    required string clientId = 3;
    required string assetPairId = 4;
    required double volume = 5;
    optional double price = 6;
    optional bool cancelAllPreviousLimitOrders = 7;
    optional LimitOrderFee fee = 8;
    repeated LimitOrderFee fees = 9;
    optional int32 type = 10;
    optional double lowerLimitPrice = 11;
    optional double lowerPrice = 12;
    optional double upperLimitPrice = 13;
    optional double upperPrice = 14;
}

enum LimitOrderType {
    LIMIT = 0;
    STOP_LIMIT = 1;
}

message OldMarketOrder {
    required int64 uid = 1;
    required int64 timestamp = 2;
    required string clientId = 3;
    required string assetPairId = 4;
    required double volume = 5;
    required bool straight = 6;
    optional double reservedLimitVolume = 7;
}

message MarketOrder {
    required string uid = 1;
    required int64 timestamp = 2;
    required string clientId = 3;
    required string assetPairId = 4;
    required double volume = 5;
    required bool straight = 6;
    optional double reservedLimitVolume = 7;
    optional Fee fee = 8;
    repeated Fee fees = 9;
}

message LimitOrderCancel {
    required string uid = 1;
    required string limitOrderId = 2;
}

message MultiLimitOrderCancel {
    required string uid = 1;
    required int64 timestamp = 2;
    required string clientId = 3;
    required string assetPairId = 4;
    required bool isBuy = 5;
}

message OldLimitOrderCancel {
    required int64 uid = 1;
    required int64 limitOrderId = 2;
}

message BalanceUpdate {
    required string uid = 1;
    required string clientId = 2;
    required string assetId = 3;
    required double amount = 4;
}

message OldBalanceUpdate {
    required int64 uid = 1;
    required string clientId = 2;
    required string assetId = 3;
    required double amount = 4;
}

message OldMultiLimitOrder {
    required int64 uid = 1;
    required int64 timestamp = 2;
    required string clientId = 3;
    required string assetPairId = 4;

    message Order {
        required double volume = 1;
        required double price = 2;
    }

    repeated Order orders = 5;

    optional bool cancelAllPreviousLimitOrders = 6;
}

message MultiLimitOrder {
    required string uid = 1;
    required int64 timestamp = 2;
    required string clientId = 3;
    required string assetPairId = 4;

    message Order {
        required string uid = 1;
        required double volume = 2;
        required double price = 3;
        optional LimitOrderFee fee = 4;
        repeated LimitOrderFee fees = 5;
    }

    repeated Order orders = 5;
    optional bool cancelAllPreviousLimitOrders = 6;
}

message WalletCredentialsReload {
    required int64 uid = 1;
    optional string clientId = 2;
}

message SubscribeToBalanceUpdate {
}

message BalanceNotification {
    required string clientId = 1;
}

message SubscribeToQuotesUpdate {
}

message QuotesUpdate {
    required string assetId = 1;
    required double price = 2;
    required double volume = 3;
}

message OrderBookSnapshot {
    required string asset = 1;
    required bool isBuy = 2;
    required int64 timestamp = 3;

    message OrderBookLevel {
        required string price = 1;
        required string volume = 2;
    }

    repeated OrderBookLevel levels = 4;
}

message ReservedBalanceUpdate {
    required string uid = 1;
    required string clientId = 2;
    required string assetId = 3;
    required double reservedAmount = 4;
}

message ReservedCashInOutOperation {
    required string id = 1;
    required string clientId = 2;
    required int64 timestamp = 3;
    required string assetId = 4;
    required double reservedVolume = 5;
}

enum FeeType {
    NO_FEE = 0;
    CLIENT_FEE = 1;
    EXTERNAL_FEE = 2;
}

enum FeeSizeType {
    PERCENTAGE = 0;
    ABSOLUTE = 1;
}

message Fee {
    required int32 type = 1;
    optional double size = 2;
    optional string sourceClientId = 3;
    optional string targetClientId = 4;
    optional int32 sizeType = 5;
    repeated string assetId = 6;
}

message LimitOrderFee {
    required int32 type = 1;
    optional double makerSize = 2;
    optional double takerSize = 3;
    optional string sourceClientId = 4;
    optional string targetClientId = 5;
    optional int32 makerSizeType = 6;
    optional int32 takerSizeType = 7;
    repeated string assetId = 8;
    optional double makerFeeModificator = 9;
}